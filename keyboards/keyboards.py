import random
import logging

from string import ascii_uppercase

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from lexicon.lexicon_ru import LEXICON_RU
from services import filters as f
from services.filters import StartGameCallbackData, ExchangeCallbackData

logger = logging.getLogger(__name__)

# -----------------–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞---------------------------------------

# ______–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞_______________
admin_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=LEXICON_RU['add_question'],
                              callback_data=f.AddQuestionCallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['show_statistic'],
                              callback_data=f.ShowStatisticCallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['send_message'],
                              callback_data=f.SendMessageCallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['edit_quiz'],
                              callback_data=f.EditQuizCallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['back'],
                              callback_data=f.BackCallbackData().pack()),
         ]
    ]
)

# _____________–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏__________-
admin_kb_league = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=LEXICON_RU['bronze_league'],
                              callback_data='bronze'),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['silver_league'],
                              callback_data=f.SilverLeagueCallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['gold_league'],
                              callback_data=f.GoldLeagueCallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['cancel'],
                              callback_data=f.BackCallbackData().pack()),
         ],
    ]
)

# _________________–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞______________
admin_kb_select_level = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=LEXICON_RU['level_1'],
                              callback_data=f.Level1CallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['level_2'],
                              callback_data=f.Level2CallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['level_3'],
                              callback_data=f.Level3CallbackData().pack()),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['cancel'],
                              callback_data=f.BackCallbackData().pack()),
         ]
    ]
)

# ___________–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã____________________
add_or_cancel = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=LEXICON_RU['add'],
                              callback_data="add"),
         ],
        [InlineKeyboardButton(text=LEXICON_RU['cancel'],
                              callback_data="cancel"),
         ]
    ]
)

# --------------------- –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è user -------------------------------------------------
# ------------ –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ InlineKeyboardMarkup --------------------------

main_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ë—Ä–æ–Ω–∑–æ–≤–∞—è –ª–∏–≥–∞",
                callback_data=StartGameCallbackData(league="Bronze").pack()
            ),
            InlineKeyboardButton(
                text="–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –ª–∏–≥–∞",
                callback_data=StartGameCallbackData(league="Silver").pack()
            ),
            InlineKeyboardButton(
                text="–ó–æ–ª–æ—Ç–∞—è –ª–∏–≥–∞",
                callback_data=StartGameCallbackData(league="Gold").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ê–∫–∫–∞—É–Ω—Ç",
                callback_data=f.AccountCallbackData().pack()
            ),
            InlineKeyboardButton(
                text="–°–ø—Ä–∞–≤–∫–∞",
                callback_data=f.HelpCallbackData().pack()
            ),
        ]
    ]
)

# ____________–°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç____________
account_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–†–µ–π—Ç–∏–Ω–≥',
                              callback_data="user_rate"),
         InlineKeyboardButton(text='–ë–∞–ª–∞–Ω—Å',
                              callback_data=f.BalanceCallbackData().pack()),
         InlineKeyboardButton(text='–û–±–º–µ–Ω',
                              callback_data=f.ExchangeButtonCallbackData().pack())
         ],
        [InlineKeyboardButton(text='–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã',
                              callback_data=f.EarnCoinsCallbackData().pack())
         ]
    ]
)


# ____________–°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –±–∞–ª–∞–Ω—Å____________
def get_balance_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up_balance")
    keyboard.button(text="‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdrawal")
    keyboard.button(text="üîÑ –û–±–º–µ–Ω—è—Ç—å", callback_data=f.ExchangeButtonCallbackData().pack())
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_account")
    return keyboard.as_markup()


# ____________–°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å____________
earn_coins_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="propose_question")],
    [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤", callback_data="subscribe_sponsors")],
    [InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite_friend")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_account")]
])

# ____________–°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –æ–±–º–µ–Ω____________
exchange_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='RUB ‚Üí Gold',
                              callback_data=ExchangeCallbackData(from_currency="Rubles", to_currency="Gold").pack()),
         InlineKeyboardButton(text='Gold ‚Üí RUB',
                              callback_data=ExchangeCallbackData(from_currency="Gold", to_currency="Rubles").pack())],

        [InlineKeyboardButton(text='Gold ‚Üí Silver',
                              callback_data=ExchangeCallbackData(from_currency="Gold", to_currency="Silver").pack()),
         InlineKeyboardButton(text='Silver ‚Üí Gold',
                              callback_data=ExchangeCallbackData(from_currency="Silver", to_currency="Gold").pack())],

        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                              callback_data="back_to_account")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞
cancel_exchange_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange")]
    ]
)

# ____________–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É____________________
game_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='A',
                              callback_data=f.ACallbackData().pack()),
         InlineKeyboardButton(text='B',
                              callback_data=f.BCallbackData().pack()),
         InlineKeyboardButton(text='C',
                              callback_data=f.CCallbackData().pack()),
         InlineKeyboardButton(text='D',
                              callback_data=f.DCallbackData().pack())
         ],
        [InlineKeyboardButton(text=LEXICON_RU['delete_answer'],
                              callback_data=f.DelAnswerCallbackData().pack()),
         InlineKeyboardButton(text=LEXICON_RU['insurance'],
                              callback_data=f.InsuranceCallbackData().pack()),
         InlineKeyboardButton(text=LEXICON_RU['mistake'],
                              callback_data=f.MistakeCallbackData().pack()),
         InlineKeyboardButton(text=LEXICON_RU['take_prize'],
                              callback_data=f.TakePrizeCallbackData().pack())
         ]
    ]
)


# ___________–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤__________
def generate_shuffled_keyboard(question_id: int, options: list[str]) -> tuple[InlineKeyboardMarkup, list[str]]:
    shuffled_options = options.copy()
    random.shuffle(shuffled_options)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(shuffled_options, start=1):
        builder.button(text=option, callback_data=f"answer:{question_id}:{i}")
    return builder.as_markup(), shuffled_options


# _____________–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã__________________


def create_question_keyboard(question_id: int, answers: list, hints: dict) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞.

    Args:
        question_id (int): ID –≤–æ–ø—Ä–æ—Å–∞.
        answers (list): –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤.
        hints (dict): –ü–æ–¥—Å–∫–∞–∑–∫–∏, —Ñ–æ—Ä–º–∞—Ç {'hint_key': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏'}.

    Returns:
        InlineKeyboardMarkup: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã (–ø–æ –¥–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ)
    buttons = [
        InlineKeyboardButton(text=f"{chr(65 + idx)}", callback_data=f"answer:{question_id}:{idx}")
        for idx, _ in enumerate(answers)
    ]
    for i in range(0, len(buttons), 2):
        keyboard.inline_keyboard.append(buttons[i:i + 2])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
    hint_buttons = [
        InlineKeyboardButton(text=name, callback_data=f"hint:{hint_key}")
        for hint_key, name in hints.items()
    ]
    keyboard.inline_keyboard.append(hint_buttons)

    return keyboard


def generate_game_message(question_text, answers):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.

    Args:
        question_text (str): –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
        answers (list): –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤.

    Returns:
        str: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    letters = list(ascii_uppercase[:len(answers)])
    formatted_answers = "\n".join(
        [f"{letter}. {answer}" for letter, answer in zip(letters, answers)]
    )
    return f"{question_text}\n\n{formatted_answers}"
