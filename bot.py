import asyncio
import logging
import os

from aiocache import RedisCache
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.fsm.storage.base import DefaultKeyBuilder
from aiogram.types import Message
from aiogram.fsm.storage.redis import RedisStorage, Redis
from aiogram_dialog import setup_dialogs
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from sqlalchemy.future import select

from db.models import AsyncSessionLocal, Users, user_referrals  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –º–æ–¥–µ–ª—å Users
from config_data.config import Config, load_config
from handlers import admin_handlers, user_handlers, game_handlers
from handlers.user_handlers import exchange_router
from keyboards.set_menu import set_main_menu
from lexicon.lexicon_ru import LEXICON_RU
from keyboards.keyboards import admin_kb, main_kb
from middleware.game_mdwr import DatabaseMiddleware
from services import game, user_dialog
from db.models import async_session_maker

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(filename)s:%(lineno)d #%(levelname)-8s '
               '[%(asctime)s] - %(name)s - %(message)s')

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    logger.info('Starting bot')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
    config: Config = load_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(
        token=config.tg_bot.token,
        default=DefaultBotProperties(parse_mode='HTML',
                                     protect_content=False)
    )

    redis = Redis(host='localhost')
    storage = RedisStorage(redis=redis, key_builder=DefaultKeyBuilder(with_destiny=True))

    REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
    REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
    cache = RedisCache(endpoint=REDIS_HOST, port=REDIS_PORT)

    dp = Dispatcher(storage=storage)

    await set_main_menu(bot)

    @dp.message(CommandStart())
    async def process_start_command(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç.
        –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É.
        """
        user_id = message.from_user.id
        username = message.from_user.username or "unknown_user"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id in config.tg_bot.admin_ids:
            await message.answer(text='–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=admin_kb)
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥)
        args = message.text.split()
        referrer_id = None

        if len(args) > 1 and args[1].isdigit():
            referrer_id = int(args[1])
            if referrer_id == user_id:  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
                referrer_id = None

        async with AsyncSessionLocal() as session:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                result = await session.execute(select(Users).filter_by(user_id=user_id))
                user = result.scalars().first()

                if not user:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_user = Users(user_id=user_id, username=username)
                    session.add(new_user)
                    await session.commit()
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: %s", username)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                    if referrer_id:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª
                        existing_referral = await session.execute(
                            select(user_referrals).where(user_referrals.c.referred_id == new_user.id)
                        )

                        if not existing_referral.scalars().first():
                            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            referrer = await session.execute(select(Users).where(Users.user_id == referrer_id))
                            referrer = referrer.scalars().first()

                            if referrer:
                                try:
                                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ user_referrals
                                    session.execute(user_referrals.insert().values(
                                        referrer_id=referrer.id, referred_id=new_user.id
                                    ))

                                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
                                    referrer.balance_silver += 500
                                    new_user.balance_silver += 500

                                    await session.commit()

                                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                                    await message.bot.send_message(
                                        referrer.user_id,
                                        f"üéâ –í–∞—à –¥—Ä—É–≥ {message.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
                                        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 500 —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç! üí∞"
                                    )

                                    await message.answer(
                                        f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –¥—Ä—É–≥–∞!\n"
                                        f"–í—ã –∏ –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª–∏ 500 —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç! üí∞\n"
                                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∏–≥—Ä–µ!"
                                    )

                                except IntegrityError:
                                    await session.rollback()

                else:
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", username)
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await message.answer(text=LEXICON_RU['/start'], reply_markup=main_kb, parse_mode='HTML')
            except SQLAlchemyError as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: %s", e)
                await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: %s", e)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏
    setup_dialogs(dp)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    dp.include_router(user_handlers.router)
    dp.include_router(exchange_router)
    dp.include_router(admin_handlers.router)
    dp.include_router(game_handlers.router)
    dp.include_router(game.router)
    dp.include_router(user_dialog.rating_router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.update.middleware(DatabaseMiddleware(async_session_maker))

    logging.basicConfig(level=logging.DEBUG)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
