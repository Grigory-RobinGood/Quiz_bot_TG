import logging

from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.enums import ContentType
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, PreCheckoutQuery
from aiogram_dialog import DialogManager, StartMode
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.db_functions import get_exchange_rates
from db.models import AsyncSessionLocal, Users, ExchangeRates, ProposedQuestion, SponsorChannel, user_subscriptions, \
    Transaction
from keyboards.keyboards import (main_kb, account_kb, get_balance_keyboard, exchange_kb, earn_coins_kb,
                                 add_or_cancel, top_up_keyboard)
from lexicon.lexicon_ru import LEXICON_RU
from services import filters as f, game
from services.FSM import DialogStates, ExchangeStates, ProposeQuestionState
from services.filters import StartGameCallbackData, BalanceCallbackData, ExchangeCallbackData, \
    ExchangeButtonCallbackData
from services.game import start_game
from services.services import process_telegram_pay, process_telegram_stars, get_yookassa_receipt
from services.user_dialog import rating_router

router = Router()

exchange_router = Router()
logger = logging.getLogger(__name__)


# __________–≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /account________________________________
@router.callback_query(f.AccountCallbackData.filter())
async def process_account_command(callback: CallbackQuery):
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text="–í—ã –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç",
            reply_markup=account_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text="–í—ã –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç", reply_markup=account_kb)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.callback_query(f.HelpCallbackData.filter())
async def process_help_command(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            text=LEXICON_RU['/help'],
            reply_markup=main_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer(text=LEXICON_RU['/help'], reply_markup=account_kb)


# ______________________–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏___________________________________
@router.callback_query(StartGameCallbackData.filter())
async def handle_start_game(call: CallbackQuery, callback_data: StartGameCallbackData, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë—Ä–æ–Ω–∑–æ–≤–∞—è –ª–∏–≥–∞".
    if callback_data.league == "Bronze":
        league = callback_data.league
        user_id = call.from_user.id

        async with AsyncSessionLocal() as session:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                await call.message.answer(f"–ò–≥—Ä–∞ –≤ {league} –ª–∏–≥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
                await start_game(
                    session=session,
                    user_id=user_id,
                    league=league,
                    send_message=call.message.answer,
                    router=game.router,
                    state=state
                )

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: {e}")
                await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –ª–∏–≥–∞".

    if callback_data.league == "Silver":
        league = callback_data.league
        user_id = call.from_user.id

        async with AsyncSessionLocal() as session:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                await call.message.answer(f"–ò–≥—Ä–∞ –≤ {league} –ª–∏–≥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
                await start_game(
                    session=session,
                    user_id=user_id,
                    league=league,
                    send_message=call.message.answer,
                    router=game.router,
                    state=state
                )

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: {e}")
                await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–æ–ª–æ—Ç–∞—è –ª–∏–≥–∞".

    if callback_data.league == "Gold":
        league = callback_data.league
        user_id = call.from_user.id

        async with AsyncSessionLocal() as session:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                await call.message.answer(f"–ò–≥—Ä–∞ –≤ {league} –ª–∏–≥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
                await start_game(
                    session=session,
                    user_id=user_id,
                    league=league,
                    send_message=call.message.answer,
                    router=game.router,
                    state=state
                )

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: {e}")
                await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
@rating_router.callback_query(F.data == "user_rate")
async def start_rating_dialog(callback: CallbackQuery, dialog_manager: DialogManager):
    await callback.message.delete()
    await dialog_manager.start(state=DialogStates.rating, mode=StartMode.RESET_STACK)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@router.callback_query(BalanceCallbackData.filter())
async def show_balance(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Users).where(Users.user_id == user_id))
        user = result.scalars().first()

        if user:
            balance_text = (
                f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n"
                # f"ü•â *–ë—Ä–æ–Ω–∑–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã:* {user.balance_bronze}\n"
                f"ü•à *–°–µ—Ä–µ–±—Ä—è–Ω—ã–µ –º–æ–Ω–µ—Ç—ã:* {user.balance_silver}\n"
                f"ü•á *–ó–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç—ã:* {user.balance_gold}\n"
                f"üíµ *–†—É–±–ª–∏:* {user.balance_rubles:.2f}‚ÇΩ"
            )
        else:
            balance_text = "‚ùå –û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    await callback.message.edit_text(
        balance_text,
        parse_mode="Markdown",
        reply_markup=get_balance_keyboard()
    )


# ------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å" -------------------
@router.callback_query(F.data == "top_up_balance")
async def show_topup_options(callback: CallbackQuery):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ """
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=top_up_keyboard)


# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.callback_query(F.data == "cancel")
async def cancel_topup(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await callback.message.edit_text("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_balance_keyboard())


# –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–≤–æ–¥ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(lambda c: c.data in ["topup_card", "topup_stars"])
async def handle_payment_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data
    await state.update_data(payment_method=payment_method)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state("waiting_for_amount")


# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@router.message(F.text, StateFilter("waiting_for_amount"))
async def create_payment(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –∏ —Å–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –≤ Telegram Pay –∏–ª–∏ Telegram Stars """
    data = await state.get_data()
    payment_method = data.get("payment_method")

    try:
        amount = float(message.text)
        if amount < 10:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 10 —Ä—É–±. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(original_amount=amount)  #  –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö

    if payment_method == "topup_card":
        await process_telegram_pay(message, amount)
    elif payment_method == "topup_stars":
        await process_telegram_stars(message, amount)


@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ Telegram Pay –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    await pre_checkout_query.answer(ok=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment_handler(message: Message, session: AsyncSession, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Pay –∏ –∑–∞–ø—Ä–æ—Å —á–µ–∫–∞ –∏–∑ –Æ–ö–∞—Å—Å—ã. """
    payment_info = message.successful_payment
    user_id = message.from_user.id
    #invoice_payload = payment_info.invoice_payload  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    data = await state.get_data()
    payment_method = data.get("payment_method", "topup_card")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–∫–∞—Ä—Ç–∞"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if payment_method == "topup_stars":
        amount = payment_info.total_amount * 100  # Telegram Stars –ø–µ—Ä–µ–¥–∞—ë—Ç —Å—É–º–º—É –±–µ–∑ –∫–æ–ø–µ–µ–∫
    else:
        amount = payment_info.total_amount / 100  # –î–ª—è –∫–∞—Ä—Ç Telegram Pay –ø–µ—Ä–µ–¥–∞—ë—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(select(Users).filter_by(user_id=user_id))
    user = result.scalars().first()

    if user:
        user.balance_rubles += amount
        session.add(user)
        await session.commit()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user_id,
            amount=amount,
            currency="RUB",
            transaction_type="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        )
        session.add(transaction)
        await session.commit()

        # –ó–∞–ø—Ä–æ—Å —á–µ–∫–∞ –∏–∑ –Æ–ö–∞—Å—Å—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π)
        if payment_method == "topup_card":
            receipt_data = await get_yookassa_receipt(payment_info.provider_payment_charge_id)

            if "receipt_registration" in receipt_data and receipt_data["receipt_registration"] == "succeeded":
                receipt_url = receipt_data.get("receipt", {}).get("url", "–ß–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                receipt_text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount:.2f} RUB —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n" \
                               f"üßæ [üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫]({receipt_url})"
            else:
                receipt_text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount:.2f} RUB —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n" \
                               "‚ö† –ß–µ–∫ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            receipt_text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount:.2f} RUB —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!"

        await message.answer(receipt_text, parse_mode="Markdown", reply_markup=get_balance_keyboard())

    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ê–∫–∫–∞—É–Ω—Ç
@router.callback_query(F.data == "back_to_account")
async def back_to_account(callback: CallbackQuery):
    await callback.message.delete()
    await process_account_command(callback)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –û–±–º–µ–Ω
@router.callback_query(ExchangeButtonCallbackData.filter())
async def show_exchange_rates(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–º–µ–Ω' ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞."""
    exchange_text = await get_exchange_rates(session)
    await callback.message.edit_text(exchange_text, reply_markup=exchange_kb)


@exchange_router.callback_query(ExchangeCallbackData.filter())
async def ask_exchange_amount(callback: CallbackQuery, callback_data: ExchangeCallbackData, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É"""
    await state.update_data(from_currency=callback_data.from_currency, to_currency=callback_data.to_currency)
    await callback.message.answer(
        f"üîÑ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ {callback_data.from_currency} ‚Üí {callback_data.to_currency}:"
    )
    await state.set_state(ExchangeStates.waiting_for_exchange_amount)


@exchange_router.callback_query(F.data == "cancel_exchange")
async def cancel_exchange(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±–º–µ–Ω–∞"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=exchange_kb)


@exchange_router.message(StateFilter(ExchangeStates.waiting_for_exchange_amount))
async def process_exchange(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–º–µ–Ω."""
    user_id = message.from_user.id
    user = await session.scalar(select(Users).where(Users.user_id == user_id))

    if not user:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=exchange_kb)
        return

    data = await state.get_data()
    from_currency = data["from_currency"]
    to_currency = data["to_currency"]

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n –ù–∞–ø—Ä–∏–º–µ—Ä, 0.6 (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '—Ç–æ—á–∫–∞')")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = getattr(user, f"balance_{from_currency.lower()}")
    if amount > user_balance:
        await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.", reply_markup=exchange_kb)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    rate = await session.scalar(select(ExchangeRates).filter_by(from_currency=from_currency, to_currency=to_currency))
    if not rate:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=exchange_kb)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
    exchanged_amount = amount * rate.rate

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setattr(user, f"balance_{from_currency.lower()}", user_balance - amount)
    setattr(user, f"balance_{to_currency.lower()}", getattr(user, f"balance_{to_currency.lower()}") + exchanged_amount)

    await session.commit()

    await message.answer(text=f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                              f"{amount} {from_currency} ‚Üí {exchanged_amount:.2f} {to_currency}",
                         reply_markup=exchange_kb)

    await state.clear()


@router.callback_query(F.data == "earn_coins")
async def earn_coins_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã' ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –º–æ–Ω–µ—Ç:", reply_markup=earn_coins_kb)


@router.callback_query(F.data == "back_to_account")
async def back_to_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text("–í—ã –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç", reply_markup=account_kb)


# _____________–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º____________________
@router.callback_query(F.data == "propose_question")
async def propose_question(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    await callback.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(ProposeQuestionState.waiting_for_question_text)


@router.message(ProposeQuestionState.waiting_for_question_text)
async def propose_question_text(message: Message, state: FSMContext):
    await state.update_data(question_text=message.text)
    await message.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    await state.set_state(ProposeQuestionState.waiting_for_correct_answer)


@router.message(ProposeQuestionState.waiting_for_correct_answer)
async def propose_correct_answer(message: Message, state: FSMContext):
    await state.update_data(correct_answer=message.text)
    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    await state.set_state(ProposeQuestionState.waiting_for_wrong_answer_1)


@router.message(ProposeQuestionState.waiting_for_wrong_answer_1)
async def propose_wrong_answer_1(message: Message, state: FSMContext):
    await state.update_data(answer_2=message.text)
    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    await state.set_state(ProposeQuestionState.waiting_for_wrong_answer_2)


@router.message(ProposeQuestionState.waiting_for_wrong_answer_2)
async def propose_wrong_answer_2(message: Message, state: FSMContext):
    await state.update_data(answer_3=message.text)
    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    await state.set_state(ProposeQuestionState.waiting_for_wrong_answer_3)


@router.message(ProposeQuestionState.waiting_for_wrong_answer_3)
async def propose_wrong_answer_3(message: Message, state: FSMContext):
    await state.update_data(answer_4=message.text)

    data = await state.get_data()
    question_preview = (f"üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n"
                        f"‚ùì –í–æ–ø—Ä–æ—Å: {data['question_text']}\n"
                        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data['correct_answer']}\n"
                        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n"
                        f"1Ô∏è‚É£ {data['answer_2']}\n"
                        f"2Ô∏è‚É£ {data['answer_3']}\n"
                        f"3Ô∏è‚É£ {data['answer_4']}")

    await message.answer(question_preview, reply_markup=add_or_cancel)
    await state.set_state(ProposeQuestionState.check_and_add_question)


@router.callback_query(ProposeQuestionState.check_and_add_question)
async def check_and_add_proposed_question(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback.data == "cancel":
        await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=earn_coins_kb)
        await state.clear()
        return

    data = await state.get_data()
    user_id = callback.from_user.id

    new_question = ProposedQuestion(
        question_text=data["question_text"],
        correct_answer=data["correct_answer"],
        answer_2=data["answer_2"],
        answer_3=data["answer_3"],
        answer_4=data["answer_4"],
        created_by_user_id=user_id,
        created_at=datetime.utcnow()
    )
    logger.info(f"Adding question: {new_question}")
    session.add(new_question)
    await session.commit()

    await callback.message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.",
                                  reply_markup=earn_coins_kb)
    await state.clear()


# ________________________ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã_________________________________
@router.callback_query(lambda c: c.data == "subscribe_sponsors")
async def show_sponsor_channels(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    result = await session.execute(select(SponsorChannel))
    sponsor_channels = result.scalars().all()

    if not sponsor_channels:
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    sub_result = await session.execute(select(user_subscriptions.c.channel_id)
                                       .where(user_subscriptions.c.user_id == user_id))
    subscribed_channels = {row[0] for row in sub_result.fetchall()}

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–æ—Ç–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if channel.id in subscribed_channels else '‚ùå'} {channel.name}",
                url=channel.link if channel.link.startswith("http") else f"https://t.me/{channel.link.lstrip('@')}"
            )
        ]
        for channel in sponsor_channels
    ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                                          callback_data="check_subscription")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                                          callback_data="menu")])

    await callback.message.edit_text(
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
    result = await session.execute(select(SponsorChannel))
    sponsor_channels = result.scalars().all()

    if not sponsor_channels:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.", show_alert=True)
        return

    new_subscriptions = []  # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫

    for channel in sponsor_channels:
        chat_id = channel.link.replace("https://t.me/", "").replace("/", "")

        try:
            chat_member = await bot.get_chat_member(chat_id, user_id)

            if chat_member.status in ["member", "administrator", "creator"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ user_subscriptions
                existing_subscription = await session.execute(
                    select(user_subscriptions)
                    .where(user_subscriptions.c.user_id == user_id,
                           user_subscriptions.c.channel_id == channel.id)
                )
                if not existing_subscription.first():
                    new_subscriptions.append(channel.id)

        except TelegramBadRequest:
            continue  # –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω

    if new_subscriptions:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ user_subscriptions
        for channel_id in new_subscriptions:
            await session.execute(user_subscriptions.insert().values(user_id=user_id, channel_id=channel_id))

        # –ù–∞—á–∏—Å–ª—è–µ–º 100 —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
        user = await session.execute(select(Users).where(Users.user_id == user_id))
        user = user.scalars().first()
        if user:
            user.balance_silver += 100 * len(new_subscriptions)

        await session.commit()
        await callback.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {len(new_subscriptions)} –∫–∞–Ω–∞–ª(–∞), –Ω–∞—á–∏—Å–ª–µ–Ω–æ "
                              f"{100 * len(new_subscriptions)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç!", show_alert=True)

    else:
        await callback.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    sub_result = await session.execute(select(user_subscriptions.c.channel_id)
                                       .where(user_subscriptions.c.user_id == user_id))
    subscribed_channels = {row[0] for row in sub_result.fetchall()}

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if channel.id in subscribed_channels else '‚ùå'} {channel.name}",
                url=channel.link if channel.link.startswith("http") else f"https://t.me/{channel.link.lstrip('@')}"
            )
        ]
        for channel in sponsor_channels
    ])
    new_keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                                              callback_data="check_subscription")])
    new_keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                                              callback_data="earn_coins")])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ
    old_text = callback.message.text
    new_text = "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':"
    old_keyboard = callback.message.reply_markup

    if old_text != new_text or old_keyboard != new_keyboard:
        await callback.message.edit_text(new_text, reply_markup=new_keyboard)


# ______________________ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞________________________________
@router.callback_query(lambda c: c.data == "invite_friend")
async def invite_friend(callback: CallbackQuery):
    user_id = callback.from_user.id
    bot_username = (await callback.bot.me()).username  # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞

    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                              switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ! {referral_link}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                              callback_data="earn_coins")]
    ])

    await callback.message.edit_text(
        f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã!\n\n"
        f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ 500 —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n<code>{referral_link}</code>",
        reply_markup=keyboard
    )
